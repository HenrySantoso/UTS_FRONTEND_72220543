@page "/category"
@using BlazorAppSolution.UI.Model
@using BlazorAppSolution.UI.Services
@inject CategoryService CategoryService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer 

<PageTitle>Category</PageTitle>

<div class="catalog-container">
    <h1>Category</h1>

    <NavLink class="btn btn-primary mb-3" href="/category/create">Add New Category</NavLink>

    <div class="filter-section mb-3">
        <input type="text" placeholder="Search by category name" @bind="searchText" class="form-control" @oninput="ApplyFilter" />
    </div>

    @if (filteredCategories == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (filteredCategories.Count == 0)
    {
        <p>No categories found.</p>
    }
    else
    {
        <div class="row">
            @foreach (var category in filteredCategories)
            {
                <div class="col-md-4 mb-4">
                    <div class="card category-card">
                        <div class="card-body text-center">
                            <h5 class="card-title">@category.Name</h5>
                            <p class="card-text">@category.Description</p>
                            <button class="btn btn-secondary me-2" @onclick="() => UpdateCategory(category.CategoryId)">Update</button>
                            <button class="btn btn-danger" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    /* Styles for container, card, and buttons */
    .catalog-container {
        background-color: #ffffff;
        color: #000000;
        padding: 20px;
    }

    .filter-section input {
        width: 100%; /* Make the search input full-width */
        margin: 0 auto;
        display: block;
        padding: 8px 12px; /* Add padding for a more spacious feel */
    }

    .category-card {
        background-color: #f8f9fa;
        color: #000000;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }

    .category-card:hover {
        transform: translateY(-2px);
    }

    .category-card .btn-secondary {
        background-color: #007bff;
        color: #ffffff;
    }

    .category-card .btn-secondary:hover {
        background-color: #0056b3;
        color: #ffffff;
    }

    .category-card .btn-danger {
        background-color: #dc3545;
        color: #ffffff;
    }

    .category-card .btn-danger:hover {
        background-color: #c82333;
        color: #ffffff;
    }

    .text-center {
        text-align: center;
    }
</style>

@code {
    private List<Category>? categories;
    private List<Category>? filteredCategories;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryService.GetCategoriesAsync();
            ApplyFilter(); // Initialize filtered categories
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An error occurred while loading categories: {ex.Message}");
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            filteredCategories = categories;
        }
        else
        {
            filteredCategories = categories?.Where(c => c.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void UpdateCategory(int categoryId)
    {
        Navigation.NavigateTo($"/category/edit/{categoryId}");
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            await CategoryService.DeleteCategoryAsync(categoryId);
            await LoadCategories(); // Refresh the category list after deletion
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An error occurred while deleting the category: {ex.Message}");
        }
    }
}
